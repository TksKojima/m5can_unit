/*
*******************************************************************************
* Copyright (c) 2022 by M5Stack
*                  Equipped with M5Core sample source code
*                          îz??  M5Core é¶ó·åπë„??
* Visit for more information: https://docs.m5stack.com/en/unit/can
* ?éÊçXëΩ??óø???: https://docs.m5stack.com/zh_CN/unit/can
*
* Describe: CA-IS3050G.  CAN transceiver unit
* Date: 2021/11/01
******************************************** ***********************************
  Please connect port B (26, 36), the device will automatically send and receive
messages through the CAN bus If there are phenomena such as failure of normal
communication, please check the communication rate or add a terminal resistance
between the H and L phases Please install library before compiling: ESP32CAN:
https://github.com/miwagner/ESP32-Arduino-CAN

M5Stack Basci v2.6 Grove 
    CAN_cfg.tx_pin_id = GPIO_NUM_21;
    CAN_cfg.rx_pin_id = GPIO_NUM_22;

*/

#include <Arduino.h>
#include <can_bus_unit.h>


CAN_device_t CAN_cfg;  // CAN Config

const int interval = 1000;  // interval at which send CAN Messages (milliseconds)
const int rx_queue_size = 10;  // Receive Queue size

uint8_t count = 0;


void canUnit_init(){
    CAN_cfg.speed     = CAN_SPEED_1000KBPS; // if use 500kbps , set 1000KBPS BUG
    CAN_cfg.tx_pin_id = GPIO_NUM_21;
    CAN_cfg.rx_pin_id = GPIO_NUM_22;
    CAN_cfg.rx_queue  = xQueueCreate(rx_queue_size, sizeof(CAN_frame_t));
    // Init CAN Module
    ESP32Can.CANInit();
    
}


void canUnit_rx_loop(){
    CAN_frame_t rx_frame;
    // Receive next CAN frame from queue
    if (xQueueReceive(CAN_cfg.rx_queue, &rx_frame, 3 * portTICK_PERIOD_MS) == pdTRUE) {
        if (rx_frame.FIR.B.FF == CAN_frame_std) {
            Serial.println("New standard frame");
            canvas.println("New standard frame");
        } else {
            Serial.println("New extended frame");
            canvas.println("New extended frame");
        }

        if (rx_frame.FIR.B.RTR == CAN_RTR) {
            Serial.printf("RTR from 0x%08X, DLC %d\r\n", rx_frame.MsgID,
                          rx_frame.FIR.B.DLC);
            canvas.printf("RTR from 0x%08X, DLC %d\r\n", rx_frame.MsgID,
                          rx_frame.FIR.B.DLC);
        } else {
            Serial.printf("from 0x%08X, DLC %d, Data \r\n", rx_frame.MsgID,
                          rx_frame.FIR.B.DLC);
            canvas.printf("from 0x%08X, DLC %d, Data \r\n", rx_frame.MsgID,
                          rx_frame.FIR.B.DLC);
            for (int i = 0; i < rx_frame.FIR.B.DLC; i++) {
                Serial.printf("0x%02X ", rx_frame.data.u8[i]);
                canvas.printf("0x%02X ", rx_frame.data.u8[i]);
            }
            Serial.println("\n");
            canvas.println("\n");
        }
        canvas.pushSprite(0, 0);
    }

}

void canUnit_tx_loop(){
    unsigned long currentMillis = millis();
    static unsigned long previousMillis = 0;  // will store last time a CAN Message was send    

    // Send CAN Message
    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;
        CAN_frame_t tx_frame;
        tx_frame.FIR.B.FF   = CAN_frame_std;
        tx_frame.MsgID      = 0x001;
        tx_frame.FIR.B.DLC  = 8;
        tx_frame.data.u8[0] = 0x00;
        tx_frame.data.u8[1] = 0x01;
        tx_frame.data.u8[2] = 0x02;
        tx_frame.data.u8[3] = 0x03;
        tx_frame.data.u8[4] = 0x04;
        tx_frame.data.u8[5] = 0x05;
        tx_frame.data.u8[6] = 0x06;
        tx_frame.data.u8[7] = 0x07;
        ESP32Can.CANWriteFrame(&tx_frame);
    }
}



